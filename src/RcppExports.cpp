// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// pnorm_cpp
arma::vec pnorm_cpp(arma::vec r);
RcppExport SEXP _MSCMGARCH_pnorm_cpp(SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(pnorm_cpp(r));
    return rcpp_result_gen;
END_RCPP
}
// dnorm_cpp
arma::vec dnorm_cpp(arma::vec r);
RcppExport SEXP _MSCMGARCH_dnorm_cpp(SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(dnorm_cpp(r));
    return rcpp_result_gen;
END_RCPP
}
// valid_bekk
bool valid_bekk(arma::mat& C, arma::mat& A, arma::mat& G);
RcppExport SEXP _MSCMGARCH_valid_bekk(SEXP CSEXP, SEXP ASEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(valid_bekk(C, A, G));
    return rcpp_result_gen;
END_RCPP
}
// gumbelCDF
double gumbelCDF(double u1, double u2, double theta);
RcppExport SEXP _MSCMGARCH_gumbelCDF(SEXP u1SEXP, SEXP u2SEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< double >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(gumbelCDF(u1, u2, theta));
    return rcpp_result_gen;
END_RCPP
}
// gumbelPDF
double gumbelPDF(double u1, double u2, double theta);
RcppExport SEXP _MSCMGARCH_gumbelPDF(SEXP u1SEXP, SEXP u2SEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< double >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(gumbelPDF(u1, u2, theta));
    return rcpp_result_gen;
END_RCPP
}
// gumbelPDF_raw
double gumbelPDF_raw(double u1, double u2, double theta);
RcppExport SEXP _MSCMGARCH_gumbelPDF_raw(SEXP u1SEXP, SEXP u2SEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< double >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(gumbelPDF_raw(u1, u2, theta));
    return rcpp_result_gen;
END_RCPP
}
// gumbelH1
double gumbelH1(double u1, double u2, double theta);
RcppExport SEXP _MSCMGARCH_gumbelH1(SEXP u1SEXP, SEXP u2SEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< double >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(gumbelH1(u1, u2, theta));
    return rcpp_result_gen;
END_RCPP
}
// gumbelH2
double gumbelH2(double u1, double u2, double theta);
RcppExport SEXP _MSCMGARCH_gumbelH2(SEXP u1SEXP, SEXP u2SEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< double >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(gumbelH2(u1, u2, theta));
    return rcpp_result_gen;
END_RCPP
}
// cor_Gumbel
arma::mat cor_Gumbel(double theta);
RcppExport SEXP _MSCMGARCH_cor_Gumbel(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(cor_Gumbel(theta));
    return rcpp_result_gen;
END_RCPP
}
// claytonCDF
double claytonCDF(double u1, double u2, double theta);
RcppExport SEXP _MSCMGARCH_claytonCDF(SEXP u1SEXP, SEXP u2SEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< double >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(claytonCDF(u1, u2, theta));
    return rcpp_result_gen;
END_RCPP
}
// claytonPDF
double claytonPDF(double u1, double u2, double theta);
RcppExport SEXP _MSCMGARCH_claytonPDF(SEXP u1SEXP, SEXP u2SEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< double >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(claytonPDF(u1, u2, theta));
    return rcpp_result_gen;
END_RCPP
}
// claytonPDF_raw
double claytonPDF_raw(double u1, double u2, double theta);
RcppExport SEXP _MSCMGARCH_claytonPDF_raw(SEXP u1SEXP, SEXP u2SEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< double >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(claytonPDF_raw(u1, u2, theta));
    return rcpp_result_gen;
END_RCPP
}
// claytonH1
double claytonH1(double u1, double u2, double theta);
RcppExport SEXP _MSCMGARCH_claytonH1(SEXP u1SEXP, SEXP u2SEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< double >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(claytonH1(u1, u2, theta));
    return rcpp_result_gen;
END_RCPP
}
// claytonH2
double claytonH2(double u1, double u2, double theta);
RcppExport SEXP _MSCMGARCH_claytonH2(SEXP u1SEXP, SEXP u2SEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< double >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(claytonH2(u1, u2, theta));
    return rcpp_result_gen;
END_RCPP
}
// claytonPDF_log
double claytonPDF_log(double u1, double u2, double theta);
RcppExport SEXP _MSCMGARCH_claytonPDF_log(SEXP u1SEXP, SEXP u2SEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< double >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(claytonPDF_log(u1, u2, theta));
    return rcpp_result_gen;
END_RCPP
}
// cor_Clayton
arma::mat cor_Clayton(double theta);
RcppExport SEXP _MSCMGARCH_cor_Clayton(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(cor_Clayton(theta));
    return rcpp_result_gen;
END_RCPP
}
// set_seed
void set_seed(double seed);
RcppExport SEXP _MSCMGARCH_set_seed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type seed(seedSEXP);
    set_seed(seed);
    return R_NilValue;
END_RCPP
}
// eigen_value_decomposition
arma::mat eigen_value_decomposition(arma::mat& A);
RcppExport SEXP _MSCMGARCH_eigen_value_decomposition(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_value_decomposition(A));
    return rcpp_result_gen;
END_RCPP
}
// BiCopSim_cpp
arma::mat BiCopSim_cpp(int NoOSim, int family, double par);
RcppExport SEXP _MSCMGARCH_BiCopSim_cpp(SEXP NoOSimSEXP, SEXP familySEXP, SEXP parSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type NoOSim(NoOSimSEXP);
    Rcpp::traits::input_parameter< int >::type family(familySEXP);
    Rcpp::traits::input_parameter< double >::type par(parSEXP);
    rcpp_result_gen = Rcpp::wrap(BiCopSim_cpp(NoOSim, family, par));
    return rcpp_result_gen;
END_RCPP
}
// rbicop_cpp
arma::mat rbicop_cpp(int NoOSim, const char* family, int rot, double par);
RcppExport SEXP _MSCMGARCH_rbicop_cpp(SEXP NoOSimSEXP, SEXP familySEXP, SEXP rotSEXP, SEXP parSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type NoOSim(NoOSimSEXP);
    Rcpp::traits::input_parameter< const char* >::type family(familySEXP);
    Rcpp::traits::input_parameter< int >::type rot(rotSEXP);
    Rcpp::traits::input_parameter< double >::type par(parSEXP);
    rcpp_result_gen = Rcpp::wrap(rbicop_cpp(NoOSim, family, rot, par));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm_cpp
double dmvnorm_cpp(arma::mat r, arma::vec& mean, arma::mat& sigma);
RcppExport SEXP _MSCMGARCH_dmvnorm_cpp(SEXP rSEXP, SEXP meanSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm_cpp(r, mean, sigma));
    return rcpp_result_gen;
END_RCPP
}
// BiCopPDF_cpp
double BiCopPDF_cpp(double returns1, double returns2, int family, double par);
RcppExport SEXP _MSCMGARCH_BiCopPDF_cpp(SEXP returns1SEXP, SEXP returns2SEXP, SEXP familySEXP, SEXP parSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type returns1(returns1SEXP);
    Rcpp::traits::input_parameter< double >::type returns2(returns2SEXP);
    Rcpp::traits::input_parameter< int >::type family(familySEXP);
    Rcpp::traits::input_parameter< double >::type par(parSEXP);
    rcpp_result_gen = Rcpp::wrap(BiCopPDF_cpp(returns1, returns2, family, par));
    return rcpp_result_gen;
END_RCPP
}
// dbicop_cpp
double dbicop_cpp(arma::mat returns, const char* family, int rot, double par);
RcppExport SEXP _MSCMGARCH_dbicop_cpp(SEXP returnsSEXP, SEXP familySEXP, SEXP rotSEXP, SEXP parSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type returns(returnsSEXP);
    Rcpp::traits::input_parameter< const char* >::type family(familySEXP);
    Rcpp::traits::input_parameter< int >::type rot(rotSEXP);
    Rcpp::traits::input_parameter< double >::type par(parSEXP);
    rcpp_result_gen = Rcpp::wrap(dbicop_cpp(returns, family, rot, par));
    return rcpp_result_gen;
END_RCPP
}
// copulaPDF
double copulaPDF(double u1, double u2, double theta, int type);
RcppExport SEXP _MSCMGARCH_copulaPDF(SEXP u1SEXP, SEXP u2SEXP, SEXP thetaSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< double >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(copulaPDF(u1, u2, theta, type));
    return rcpp_result_gen;
END_RCPP
}
// copulaPDF_raw
double copulaPDF_raw(double u1, double u2, double theta, int type);
RcppExport SEXP _MSCMGARCH_copulaPDF_raw(SEXP u1SEXP, SEXP u2SEXP, SEXP thetaSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< double >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(copulaPDF_raw(u1, u2, theta, type));
    return rcpp_result_gen;
END_RCPP
}
// copulaH1
double copulaH1(double u1, double u2, double theta, int type);
RcppExport SEXP _MSCMGARCH_copulaH1(SEXP u1SEXP, SEXP u2SEXP, SEXP thetaSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< double >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(copulaH1(u1, u2, theta, type));
    return rcpp_result_gen;
END_RCPP
}
// copulaH2
double copulaH2(double u1, double u2, double theta, int type);
RcppExport SEXP _MSCMGARCH_copulaH2(SEXP u1SEXP, SEXP u2SEXP, SEXP thetaSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< double >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(copulaH2(u1, u2, theta, type));
    return rcpp_result_gen;
END_RCPP
}
// valid_copula
bool valid_copula(arma::vec theta, arma::vec type);
RcppExport SEXP _MSCMGARCH_valid_copula(SEXP thetaSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(valid_copula(theta, type));
    return rcpp_result_gen;
END_RCPP
}
// VineCopula2
double VineCopula2(arma::vec u, arma::vec copula_par, arma::vec type);
RcppExport SEXP _MSCMGARCH_VineCopula2(SEXP uSEXP, SEXP copula_parSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type copula_par(copula_parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(VineCopula2(u, copula_par, type));
    return rcpp_result_gen;
END_RCPP
}
// VineH2
double VineH2(double u1, double u2, double u3, arma::vec copula_par, arma::vec type);
RcppExport SEXP _MSCMGARCH_VineH2(SEXP u1SEXP, SEXP u2SEXP, SEXP u3SEXP, SEXP copula_parSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< double >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< double >::type u3(u3SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type copula_par(copula_parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(VineH2(u1, u2, u3, copula_par, type));
    return rcpp_result_gen;
END_RCPP
}
// VineCopula
double VineCopula(arma::vec u, arma::vec copula_par, arma::vec type);
RcppExport SEXP _MSCMGARCH_VineCopula(SEXP uSEXP, SEXP copula_parSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type copula_par(copula_parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(VineCopula(u, copula_par, type));
    return rcpp_result_gen;
END_RCPP
}
// loglike_Normal_Gumbel_GumbelSurvival
double loglike_Normal_Gumbel_GumbelSurvival(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_loglike_Normal_Gumbel_GumbelSurvival(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_Normal_Gumbel_GumbelSurvival(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// loglike_Normal_Gumbel_Clayton
double loglike_Normal_Gumbel_Clayton(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_loglike_Normal_Gumbel_Clayton(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_Normal_Gumbel_Clayton(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// loglike_Normal_GumbelS_ClaytonS
double loglike_Normal_GumbelS_ClaytonS(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_loglike_Normal_GumbelS_ClaytonS(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_Normal_GumbelS_ClaytonS(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// loglike_Normal_Clayton_ClaytonSurvival
double loglike_Normal_Clayton_ClaytonSurvival(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_loglike_Normal_Clayton_ClaytonSurvival(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_Normal_Clayton_ClaytonSurvival(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// loglike_Clayton_Gumbel
double loglike_Clayton_Gumbel(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_loglike_Clayton_Gumbel(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_Clayton_Gumbel(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// loglike_Clayton_Gumbel90
double loglike_Clayton_Gumbel90(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_loglike_Clayton_Gumbel90(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_Clayton_Gumbel90(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// loglike_Normal_Gumbel
double loglike_Normal_Gumbel(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_loglike_Normal_Gumbel(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_Normal_Gumbel(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// loglike_Normal_GumbelS
double loglike_Normal_GumbelS(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_loglike_Normal_GumbelS(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_Normal_GumbelS(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// loglike_Normal_Gumbel1
double loglike_Normal_Gumbel1(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_loglike_Normal_Gumbel1(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_Normal_Gumbel1(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// loglike_Normal_GumbelS1
double loglike_Normal_GumbelS1(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_loglike_Normal_GumbelS1(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_Normal_GumbelS1(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// loglike_Normal_Frank
double loglike_Normal_Frank(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_loglike_Normal_Frank(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_Normal_Frank(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// loglike_Normal_Clayton1
double loglike_Normal_Clayton1(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_loglike_Normal_Clayton1(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_Normal_Clayton1(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// loglike_Normal_ClaytonS
double loglike_Normal_ClaytonS(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_loglike_Normal_ClaytonS(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_Normal_ClaytonS(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// loglike_Normal_Clayton
double loglike_Normal_Clayton(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_loglike_Normal_Clayton(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_Normal_Clayton(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// loglike_Normal_ClaytonS1
double loglike_Normal_ClaytonS1(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_loglike_Normal_ClaytonS1(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_Normal_ClaytonS1(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// random_grid_search_clayton_gumbel
Rcpp::List random_grid_search_clayton_gumbel(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r, const int nc);
RcppExport SEXP _MSCMGARCH_random_grid_search_clayton_gumbel(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    rcpp_result_gen = Rcpp::wrap(random_grid_search_clayton_gumbel(bekk, theta, r, nc));
    return rcpp_result_gen;
END_RCPP
}
// random_grid_search_normal_gumbel
Rcpp::List random_grid_search_normal_gumbel(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r, const int nc);
RcppExport SEXP _MSCMGARCH_random_grid_search_normal_gumbel(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    rcpp_result_gen = Rcpp::wrap(random_grid_search_normal_gumbel(bekk, theta, r, nc));
    return rcpp_result_gen;
END_RCPP
}
// random_grid_search_normal_gumbel1
Rcpp::List random_grid_search_normal_gumbel1(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r, const int nc);
RcppExport SEXP _MSCMGARCH_random_grid_search_normal_gumbel1(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    rcpp_result_gen = Rcpp::wrap(random_grid_search_normal_gumbel1(bekk, theta, r, nc));
    return rcpp_result_gen;
END_RCPP
}
// random_grid_search_normal_gumbelS
Rcpp::List random_grid_search_normal_gumbelS(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r, const int nc);
RcppExport SEXP _MSCMGARCH_random_grid_search_normal_gumbelS(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    rcpp_result_gen = Rcpp::wrap(random_grid_search_normal_gumbelS(bekk, theta, r, nc));
    return rcpp_result_gen;
END_RCPP
}
// random_grid_search_normal_clayton
Rcpp::List random_grid_search_normal_clayton(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r, const int nc);
RcppExport SEXP _MSCMGARCH_random_grid_search_normal_clayton(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    rcpp_result_gen = Rcpp::wrap(random_grid_search_normal_clayton(bekk, theta, r, nc));
    return rcpp_result_gen;
END_RCPP
}
// random_grid_search_normal_claytonS
Rcpp::List random_grid_search_normal_claytonS(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r, const int nc);
RcppExport SEXP _MSCMGARCH_random_grid_search_normal_claytonS(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    rcpp_result_gen = Rcpp::wrap(random_grid_search_normal_claytonS(bekk, theta, r, nc));
    return rcpp_result_gen;
END_RCPP
}
// random_grid_search_normal_frank
Rcpp::List random_grid_search_normal_frank(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r, const int nc);
RcppExport SEXP _MSCMGARCH_random_grid_search_normal_frank(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    rcpp_result_gen = Rcpp::wrap(random_grid_search_normal_frank(bekk, theta, r, nc));
    return rcpp_result_gen;
END_RCPP
}
// random_grid_search_clayton_gumbel90
Rcpp::List random_grid_search_clayton_gumbel90(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r, const int nc);
RcppExport SEXP _MSCMGARCH_random_grid_search_clayton_gumbel90(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    rcpp_result_gen = Rcpp::wrap(random_grid_search_clayton_gumbel90(bekk, theta, r, nc));
    return rcpp_result_gen;
END_RCPP
}
// random_grid_search_normal_gumbel_gumbelsurvival
Rcpp::List random_grid_search_normal_gumbel_gumbelsurvival(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_random_grid_search_normal_gumbel_gumbelsurvival(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(random_grid_search_normal_gumbel_gumbelsurvival(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// random_grid_search_normal_gumbelS_claytonS
Rcpp::List random_grid_search_normal_gumbelS_claytonS(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_random_grid_search_normal_gumbelS_claytonS(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(random_grid_search_normal_gumbelS_claytonS(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// random_grid_search_normal_gumbel_clayton
Rcpp::List random_grid_search_normal_gumbel_clayton(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_random_grid_search_normal_gumbel_clayton(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(random_grid_search_normal_gumbel_clayton(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// random_grid_search_normal_clayton_claytonsurvival
Rcpp::List random_grid_search_normal_clayton_claytonsurvival(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_random_grid_search_normal_clayton_claytonsurvival(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(random_grid_search_normal_clayton_claytonsurvival(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// FilterProbs_normal_clayton_claytonS
arma::mat FilterProbs_normal_clayton_claytonS(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_FilterProbs_normal_clayton_claytonS(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(FilterProbs_normal_clayton_claytonS(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// FilterProbs_normal_gumbel_clayton
arma::mat FilterProbs_normal_gumbel_clayton(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_FilterProbs_normal_gumbel_clayton(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(FilterProbs_normal_gumbel_clayton(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// FilterProbs_normal_gumbelS_claytonS
arma::mat FilterProbs_normal_gumbelS_claytonS(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_FilterProbs_normal_gumbelS_claytonS(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(FilterProbs_normal_gumbelS_claytonS(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// FilterProbs_normal_gumbel_gumbelS
arma::mat FilterProbs_normal_gumbel_gumbelS(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_FilterProbs_normal_gumbel_gumbelS(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(FilterProbs_normal_gumbel_gumbelS(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// FilterProbs_Clayton_Gumbel90
arma::mat FilterProbs_Clayton_Gumbel90(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_FilterProbs_Clayton_Gumbel90(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(FilterProbs_Clayton_Gumbel90(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// FilterProbs_Normal_Gumbel
arma::mat FilterProbs_Normal_Gumbel(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_FilterProbs_Normal_Gumbel(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(FilterProbs_Normal_Gumbel(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// FilterProbs_Normal_Clayton
arma::mat FilterProbs_Normal_Clayton(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_FilterProbs_Normal_Clayton(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(FilterProbs_Normal_Clayton(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// FilterProbs_Normal_GumbelS
arma::mat FilterProbs_Normal_GumbelS(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_FilterProbs_Normal_GumbelS(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(FilterProbs_Normal_GumbelS(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// FilterProbs_Normal_ClaytonS
arma::mat FilterProbs_Normal_ClaytonS(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_FilterProbs_Normal_ClaytonS(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(FilterProbs_Normal_ClaytonS(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// FilterProbs_Normal_Frank
arma::mat FilterProbs_Normal_Frank(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_FilterProbs_Normal_Frank(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(FilterProbs_Normal_Frank(bekk, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// loglike_LL_Gumbel
double loglike_LL_Gumbel(const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_loglike_LL_Gumbel(SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_LL_Gumbel(theta, r));
    return rcpp_result_gen;
END_RCPP
}
// loglike_LL_GumbelS
double loglike_LL_GumbelS(const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_loglike_LL_GumbelS(SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_LL_GumbelS(theta, r));
    return rcpp_result_gen;
END_RCPP
}
// loglike_LL_Clayton
double loglike_LL_Clayton(const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_loglike_LL_Clayton(SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_LL_Clayton(theta, r));
    return rcpp_result_gen;
END_RCPP
}
// loglike_LL_ClaytonS
double loglike_LL_ClaytonS(const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_loglike_LL_ClaytonS(SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_LL_ClaytonS(theta, r));
    return rcpp_result_gen;
END_RCPP
}
// loglike_LL_Frank
double loglike_LL_Frank(const arma::vec& theta, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_loglike_LL_Frank(SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_LL_Frank(theta, r));
    return rcpp_result_gen;
END_RCPP
}
// indicatorFunction
int indicatorFunction(arma::mat r, arma::mat signs);
RcppExport SEXP _MSCMGARCH_indicatorFunction(SEXP rSEXP, SEXP signsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type signs(signsSEXP);
    rcpp_result_gen = Rcpp::wrap(indicatorFunction(r, signs));
    return rcpp_result_gen;
END_RCPP
}
// comp_bekk_forecast
arma::mat comp_bekk_forecast(const arma::vec& bekk, const arma::mat& r);
RcppExport SEXP _MSCMGARCH_comp_bekk_forecast(SEXP bekkSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_bekk_forecast(bekk, r));
    return rcpp_result_gen;
END_RCPP
}
// comp_asymm_bekk_forecast
arma::mat comp_asymm_bekk_forecast(const arma::vec& bekk, const arma::mat& r, arma::mat signs);
RcppExport SEXP _MSCMGARCH_comp_asymm_bekk_forecast(SEXP bekkSEXP, SEXP rSEXP, SEXP signsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type signs(signsSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_asymm_bekk_forecast(bekk, r, signs));
    return rcpp_result_gen;
END_RCPP
}
// valid_asymm_bekk
bool valid_asymm_bekk(arma::mat& C, arma::mat& A, arma::mat& B, arma::mat& G, arma::mat r, arma::mat signs);
RcppExport SEXP _MSCMGARCH_valid_asymm_bekk(SEXP CSEXP, SEXP ASEXP, SEXP BSEXP, SEXP GSEXP, SEXP rSEXP, SEXP signsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type signs(signsSEXP);
    rcpp_result_gen = Rcpp::wrap(valid_asymm_bekk(C, A, B, G, r, signs));
    return rcpp_result_gen;
END_RCPP
}
// copula_cor
arma::vec copula_cor(arma::vec& theta, arma::vec& type);
RcppExport SEXP _MSCMGARCH_copula_cor(SEXP thetaSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(copula_cor(theta, type));
    return rcpp_result_gen;
END_RCPP
}
// cor_mat
arma::mat cor_mat(arma::vec& theta, arma::vec& type);
RcppExport SEXP _MSCMGARCH_cor_mat(SEXP thetaSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cor_mat(theta, type));
    return rcpp_result_gen;
END_RCPP
}
// loglike_Normal_Copula_3
double loglike_Normal_Copula_3(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r, arma::vec& type);
RcppExport SEXP _MSCMGARCH_loglike_Normal_Copula_3(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_Normal_Copula_3(bekk, theta, r, type));
    return rcpp_result_gen;
END_RCPP
}
// loglike_Normal_Copula_3_asymm
double loglike_Normal_Copula_3_asymm(const arma::vec& bekk, arma::vec signs, const arma::vec& theta, const arma::mat& r, arma::vec& type);
RcppExport SEXP _MSCMGARCH_loglike_Normal_Copula_3_asymm(SEXP bekkSEXP, SEXP signsSEXP, SEXP thetaSEXP, SEXP rSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type signs(signsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_Normal_Copula_3_asymm(bekk, signs, theta, r, type));
    return rcpp_result_gen;
END_RCPP
}
// loglike_Normal_Copula_Copula_3
double loglike_Normal_Copula_Copula_3(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r, arma::vec& type);
RcppExport SEXP _MSCMGARCH_loglike_Normal_Copula_Copula_3(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_Normal_Copula_Copula_3(bekk, theta, r, type));
    return rcpp_result_gen;
END_RCPP
}
// loglike_Normal_Copula_Copula_3_asymm
double loglike_Normal_Copula_Copula_3_asymm(const arma::vec& bekk, arma::vec signs, const arma::vec& theta, const arma::mat& r, arma::vec& type);
RcppExport SEXP _MSCMGARCH_loglike_Normal_Copula_Copula_3_asymm(SEXP bekkSEXP, SEXP signsSEXP, SEXP thetaSEXP, SEXP rSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type signs(signsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_Normal_Copula_Copula_3_asymm(bekk, signs, theta, r, type));
    return rcpp_result_gen;
END_RCPP
}
// LL_loglike_Copula_3
double LL_loglike_Copula_3(arma::vec& theta, const arma::mat& r, arma::vec& type);
RcppExport SEXP _MSCMGARCH_LL_loglike_Copula_3(SEXP thetaSEXP, SEXP rSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(LL_loglike_Copula_3(theta, r, type));
    return rcpp_result_gen;
END_RCPP
}
// LL_loglike_Copula_3_asymm
double LL_loglike_Copula_3_asymm(const arma::vec& theta, arma::vec signs, const arma::mat& r, arma::vec& type);
RcppExport SEXP _MSCMGARCH_LL_loglike_Copula_3_asymm(SEXP thetaSEXP, SEXP signsSEXP, SEXP rSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type signs(signsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(LL_loglike_Copula_3_asymm(theta, signs, r, type));
    return rcpp_result_gen;
END_RCPP
}
// random_grid_search_normal_copula_3
Rcpp::List random_grid_search_normal_copula_3(const arma::vec& bekk, const arma::vec& theta, arma::vec& type, const arma::mat& r, const int nc);
RcppExport SEXP _MSCMGARCH_random_grid_search_normal_copula_3(SEXP bekkSEXP, SEXP thetaSEXP, SEXP typeSEXP, SEXP rSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    rcpp_result_gen = Rcpp::wrap(random_grid_search_normal_copula_3(bekk, theta, type, r, nc));
    return rcpp_result_gen;
END_RCPP
}
// random_grid_search_normal_copula_copula_3
Rcpp::List random_grid_search_normal_copula_copula_3(const arma::vec& bekk, const arma::vec& theta, arma::vec& type, const arma::mat& r, const int nc);
RcppExport SEXP _MSCMGARCH_random_grid_search_normal_copula_copula_3(SEXP bekkSEXP, SEXP thetaSEXP, SEXP typeSEXP, SEXP rSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    rcpp_result_gen = Rcpp::wrap(random_grid_search_normal_copula_copula_3(bekk, theta, type, r, nc));
    return rcpp_result_gen;
END_RCPP
}
// random_grid_search_normal_copula_3_asymm
Rcpp::List random_grid_search_normal_copula_3_asymm(const arma::vec& bekk, arma::vec signs, const arma::vec& theta, arma::vec& type, const arma::mat& r, const int nc);
RcppExport SEXP _MSCMGARCH_random_grid_search_normal_copula_3_asymm(SEXP bekkSEXP, SEXP signsSEXP, SEXP thetaSEXP, SEXP typeSEXP, SEXP rSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type signs(signsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    rcpp_result_gen = Rcpp::wrap(random_grid_search_normal_copula_3_asymm(bekk, signs, theta, type, r, nc));
    return rcpp_result_gen;
END_RCPP
}
// random_grid_search_normal_copula_copula_3_asymm
Rcpp::List random_grid_search_normal_copula_copula_3_asymm(const arma::vec& bekk, arma::vec signs, const arma::vec& theta, arma::vec& type, const arma::mat& r, const int nc);
RcppExport SEXP _MSCMGARCH_random_grid_search_normal_copula_copula_3_asymm(SEXP bekkSEXP, SEXP signsSEXP, SEXP thetaSEXP, SEXP typeSEXP, SEXP rSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type signs(signsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    rcpp_result_gen = Rcpp::wrap(random_grid_search_normal_copula_copula_3_asymm(bekk, signs, theta, type, r, nc));
    return rcpp_result_gen;
END_RCPP
}
// FilterProbs_Normal_Copula_3
arma::mat FilterProbs_Normal_Copula_3(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r, arma::vec& type);
RcppExport SEXP _MSCMGARCH_FilterProbs_Normal_Copula_3(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(FilterProbs_Normal_Copula_3(bekk, theta, r, type));
    return rcpp_result_gen;
END_RCPP
}
// FilterProbs_Normal_Copula_3_asymm
arma::mat FilterProbs_Normal_Copula_3_asymm(const arma::vec& bekk, arma::vec signs, const arma::vec& theta, const arma::mat& r, arma::vec& type);
RcppExport SEXP _MSCMGARCH_FilterProbs_Normal_Copula_3_asymm(SEXP bekkSEXP, SEXP signsSEXP, SEXP thetaSEXP, SEXP rSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type signs(signsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(FilterProbs_Normal_Copula_3_asymm(bekk, signs, theta, r, type));
    return rcpp_result_gen;
END_RCPP
}
// FilterProbs_Normal_Copula_Copula_3
arma::mat FilterProbs_Normal_Copula_Copula_3(const arma::vec& bekk, const arma::vec& theta, const arma::mat& r, arma::vec& type);
RcppExport SEXP _MSCMGARCH_FilterProbs_Normal_Copula_Copula_3(SEXP bekkSEXP, SEXP thetaSEXP, SEXP rSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(FilterProbs_Normal_Copula_Copula_3(bekk, theta, r, type));
    return rcpp_result_gen;
END_RCPP
}
// FilterProbs_Normal_Copula_Copula_3_asymm
arma::mat FilterProbs_Normal_Copula_Copula_3_asymm(const arma::vec& bekk, arma::vec signs, const arma::vec& theta, const arma::mat& r, arma::vec& type);
RcppExport SEXP _MSCMGARCH_FilterProbs_Normal_Copula_Copula_3_asymm(SEXP bekkSEXP, SEXP signsSEXP, SEXP thetaSEXP, SEXP rSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bekk(bekkSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type signs(signsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(FilterProbs_Normal_Copula_Copula_3_asymm(bekk, signs, theta, r, type));
    return rcpp_result_gen;
END_RCPP
}
// random_grid_search_LL_copula_3
Rcpp::List random_grid_search_LL_copula_3(arma::vec& theta, arma::mat& r, arma::vec& type, const int nc);
RcppExport SEXP _MSCMGARCH_random_grid_search_LL_copula_3(SEXP thetaSEXP, SEXP rSEXP, SEXP typeSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    rcpp_result_gen = Rcpp::wrap(random_grid_search_LL_copula_3(theta, r, type, nc));
    return rcpp_result_gen;
END_RCPP
}
// random_grid_search_LL_copula_3_asymm
Rcpp::List random_grid_search_LL_copula_3_asymm(arma::vec& theta, arma::vec& signs, arma::mat& r, arma::vec& type, int nc);
RcppExport SEXP _MSCMGARCH_random_grid_search_LL_copula_3_asymm(SEXP thetaSEXP, SEXP signsSEXP, SEXP rSEXP, SEXP typeSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type signs(signsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    rcpp_result_gen = Rcpp::wrap(random_grid_search_LL_copula_3_asymm(theta, signs, r, type, nc));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MSCMGARCH_pnorm_cpp", (DL_FUNC) &_MSCMGARCH_pnorm_cpp, 1},
    {"_MSCMGARCH_dnorm_cpp", (DL_FUNC) &_MSCMGARCH_dnorm_cpp, 1},
    {"_MSCMGARCH_valid_bekk", (DL_FUNC) &_MSCMGARCH_valid_bekk, 3},
    {"_MSCMGARCH_gumbelCDF", (DL_FUNC) &_MSCMGARCH_gumbelCDF, 3},
    {"_MSCMGARCH_gumbelPDF", (DL_FUNC) &_MSCMGARCH_gumbelPDF, 3},
    {"_MSCMGARCH_gumbelPDF_raw", (DL_FUNC) &_MSCMGARCH_gumbelPDF_raw, 3},
    {"_MSCMGARCH_gumbelH1", (DL_FUNC) &_MSCMGARCH_gumbelH1, 3},
    {"_MSCMGARCH_gumbelH2", (DL_FUNC) &_MSCMGARCH_gumbelH2, 3},
    {"_MSCMGARCH_cor_Gumbel", (DL_FUNC) &_MSCMGARCH_cor_Gumbel, 1},
    {"_MSCMGARCH_claytonCDF", (DL_FUNC) &_MSCMGARCH_claytonCDF, 3},
    {"_MSCMGARCH_claytonPDF", (DL_FUNC) &_MSCMGARCH_claytonPDF, 3},
    {"_MSCMGARCH_claytonPDF_raw", (DL_FUNC) &_MSCMGARCH_claytonPDF_raw, 3},
    {"_MSCMGARCH_claytonH1", (DL_FUNC) &_MSCMGARCH_claytonH1, 3},
    {"_MSCMGARCH_claytonH2", (DL_FUNC) &_MSCMGARCH_claytonH2, 3},
    {"_MSCMGARCH_claytonPDF_log", (DL_FUNC) &_MSCMGARCH_claytonPDF_log, 3},
    {"_MSCMGARCH_cor_Clayton", (DL_FUNC) &_MSCMGARCH_cor_Clayton, 1},
    {"_MSCMGARCH_set_seed", (DL_FUNC) &_MSCMGARCH_set_seed, 1},
    {"_MSCMGARCH_eigen_value_decomposition", (DL_FUNC) &_MSCMGARCH_eigen_value_decomposition, 1},
    {"_MSCMGARCH_BiCopSim_cpp", (DL_FUNC) &_MSCMGARCH_BiCopSim_cpp, 3},
    {"_MSCMGARCH_rbicop_cpp", (DL_FUNC) &_MSCMGARCH_rbicop_cpp, 4},
    {"_MSCMGARCH_dmvnorm_cpp", (DL_FUNC) &_MSCMGARCH_dmvnorm_cpp, 3},
    {"_MSCMGARCH_BiCopPDF_cpp", (DL_FUNC) &_MSCMGARCH_BiCopPDF_cpp, 4},
    {"_MSCMGARCH_dbicop_cpp", (DL_FUNC) &_MSCMGARCH_dbicop_cpp, 4},
    {"_MSCMGARCH_copulaPDF", (DL_FUNC) &_MSCMGARCH_copulaPDF, 4},
    {"_MSCMGARCH_copulaPDF_raw", (DL_FUNC) &_MSCMGARCH_copulaPDF_raw, 4},
    {"_MSCMGARCH_copulaH1", (DL_FUNC) &_MSCMGARCH_copulaH1, 4},
    {"_MSCMGARCH_copulaH2", (DL_FUNC) &_MSCMGARCH_copulaH2, 4},
    {"_MSCMGARCH_valid_copula", (DL_FUNC) &_MSCMGARCH_valid_copula, 2},
    {"_MSCMGARCH_VineCopula2", (DL_FUNC) &_MSCMGARCH_VineCopula2, 3},
    {"_MSCMGARCH_VineH2", (DL_FUNC) &_MSCMGARCH_VineH2, 5},
    {"_MSCMGARCH_VineCopula", (DL_FUNC) &_MSCMGARCH_VineCopula, 3},
    {"_MSCMGARCH_loglike_Normal_Gumbel_GumbelSurvival", (DL_FUNC) &_MSCMGARCH_loglike_Normal_Gumbel_GumbelSurvival, 3},
    {"_MSCMGARCH_loglike_Normal_Gumbel_Clayton", (DL_FUNC) &_MSCMGARCH_loglike_Normal_Gumbel_Clayton, 3},
    {"_MSCMGARCH_loglike_Normal_GumbelS_ClaytonS", (DL_FUNC) &_MSCMGARCH_loglike_Normal_GumbelS_ClaytonS, 3},
    {"_MSCMGARCH_loglike_Normal_Clayton_ClaytonSurvival", (DL_FUNC) &_MSCMGARCH_loglike_Normal_Clayton_ClaytonSurvival, 3},
    {"_MSCMGARCH_loglike_Clayton_Gumbel", (DL_FUNC) &_MSCMGARCH_loglike_Clayton_Gumbel, 3},
    {"_MSCMGARCH_loglike_Clayton_Gumbel90", (DL_FUNC) &_MSCMGARCH_loglike_Clayton_Gumbel90, 3},
    {"_MSCMGARCH_loglike_Normal_Gumbel", (DL_FUNC) &_MSCMGARCH_loglike_Normal_Gumbel, 3},
    {"_MSCMGARCH_loglike_Normal_GumbelS", (DL_FUNC) &_MSCMGARCH_loglike_Normal_GumbelS, 3},
    {"_MSCMGARCH_loglike_Normal_Gumbel1", (DL_FUNC) &_MSCMGARCH_loglike_Normal_Gumbel1, 3},
    {"_MSCMGARCH_loglike_Normal_GumbelS1", (DL_FUNC) &_MSCMGARCH_loglike_Normal_GumbelS1, 3},
    {"_MSCMGARCH_loglike_Normal_Frank", (DL_FUNC) &_MSCMGARCH_loglike_Normal_Frank, 3},
    {"_MSCMGARCH_loglike_Normal_Clayton1", (DL_FUNC) &_MSCMGARCH_loglike_Normal_Clayton1, 3},
    {"_MSCMGARCH_loglike_Normal_ClaytonS", (DL_FUNC) &_MSCMGARCH_loglike_Normal_ClaytonS, 3},
    {"_MSCMGARCH_loglike_Normal_Clayton", (DL_FUNC) &_MSCMGARCH_loglike_Normal_Clayton, 3},
    {"_MSCMGARCH_loglike_Normal_ClaytonS1", (DL_FUNC) &_MSCMGARCH_loglike_Normal_ClaytonS1, 3},
    {"_MSCMGARCH_random_grid_search_clayton_gumbel", (DL_FUNC) &_MSCMGARCH_random_grid_search_clayton_gumbel, 4},
    {"_MSCMGARCH_random_grid_search_normal_gumbel", (DL_FUNC) &_MSCMGARCH_random_grid_search_normal_gumbel, 4},
    {"_MSCMGARCH_random_grid_search_normal_gumbel1", (DL_FUNC) &_MSCMGARCH_random_grid_search_normal_gumbel1, 4},
    {"_MSCMGARCH_random_grid_search_normal_gumbelS", (DL_FUNC) &_MSCMGARCH_random_grid_search_normal_gumbelS, 4},
    {"_MSCMGARCH_random_grid_search_normal_clayton", (DL_FUNC) &_MSCMGARCH_random_grid_search_normal_clayton, 4},
    {"_MSCMGARCH_random_grid_search_normal_claytonS", (DL_FUNC) &_MSCMGARCH_random_grid_search_normal_claytonS, 4},
    {"_MSCMGARCH_random_grid_search_normal_frank", (DL_FUNC) &_MSCMGARCH_random_grid_search_normal_frank, 4},
    {"_MSCMGARCH_random_grid_search_clayton_gumbel90", (DL_FUNC) &_MSCMGARCH_random_grid_search_clayton_gumbel90, 4},
    {"_MSCMGARCH_random_grid_search_normal_gumbel_gumbelsurvival", (DL_FUNC) &_MSCMGARCH_random_grid_search_normal_gumbel_gumbelsurvival, 3},
    {"_MSCMGARCH_random_grid_search_normal_gumbelS_claytonS", (DL_FUNC) &_MSCMGARCH_random_grid_search_normal_gumbelS_claytonS, 3},
    {"_MSCMGARCH_random_grid_search_normal_gumbel_clayton", (DL_FUNC) &_MSCMGARCH_random_grid_search_normal_gumbel_clayton, 3},
    {"_MSCMGARCH_random_grid_search_normal_clayton_claytonsurvival", (DL_FUNC) &_MSCMGARCH_random_grid_search_normal_clayton_claytonsurvival, 3},
    {"_MSCMGARCH_FilterProbs_normal_clayton_claytonS", (DL_FUNC) &_MSCMGARCH_FilterProbs_normal_clayton_claytonS, 3},
    {"_MSCMGARCH_FilterProbs_normal_gumbel_clayton", (DL_FUNC) &_MSCMGARCH_FilterProbs_normal_gumbel_clayton, 3},
    {"_MSCMGARCH_FilterProbs_normal_gumbelS_claytonS", (DL_FUNC) &_MSCMGARCH_FilterProbs_normal_gumbelS_claytonS, 3},
    {"_MSCMGARCH_FilterProbs_normal_gumbel_gumbelS", (DL_FUNC) &_MSCMGARCH_FilterProbs_normal_gumbel_gumbelS, 3},
    {"_MSCMGARCH_FilterProbs_Clayton_Gumbel90", (DL_FUNC) &_MSCMGARCH_FilterProbs_Clayton_Gumbel90, 3},
    {"_MSCMGARCH_FilterProbs_Normal_Gumbel", (DL_FUNC) &_MSCMGARCH_FilterProbs_Normal_Gumbel, 3},
    {"_MSCMGARCH_FilterProbs_Normal_Clayton", (DL_FUNC) &_MSCMGARCH_FilterProbs_Normal_Clayton, 3},
    {"_MSCMGARCH_FilterProbs_Normal_GumbelS", (DL_FUNC) &_MSCMGARCH_FilterProbs_Normal_GumbelS, 3},
    {"_MSCMGARCH_FilterProbs_Normal_ClaytonS", (DL_FUNC) &_MSCMGARCH_FilterProbs_Normal_ClaytonS, 3},
    {"_MSCMGARCH_FilterProbs_Normal_Frank", (DL_FUNC) &_MSCMGARCH_FilterProbs_Normal_Frank, 3},
    {"_MSCMGARCH_loglike_LL_Gumbel", (DL_FUNC) &_MSCMGARCH_loglike_LL_Gumbel, 2},
    {"_MSCMGARCH_loglike_LL_GumbelS", (DL_FUNC) &_MSCMGARCH_loglike_LL_GumbelS, 2},
    {"_MSCMGARCH_loglike_LL_Clayton", (DL_FUNC) &_MSCMGARCH_loglike_LL_Clayton, 2},
    {"_MSCMGARCH_loglike_LL_ClaytonS", (DL_FUNC) &_MSCMGARCH_loglike_LL_ClaytonS, 2},
    {"_MSCMGARCH_loglike_LL_Frank", (DL_FUNC) &_MSCMGARCH_loglike_LL_Frank, 2},
    {"_MSCMGARCH_indicatorFunction", (DL_FUNC) &_MSCMGARCH_indicatorFunction, 2},
    {"_MSCMGARCH_comp_bekk_forecast", (DL_FUNC) &_MSCMGARCH_comp_bekk_forecast, 2},
    {"_MSCMGARCH_comp_asymm_bekk_forecast", (DL_FUNC) &_MSCMGARCH_comp_asymm_bekk_forecast, 3},
    {"_MSCMGARCH_valid_asymm_bekk", (DL_FUNC) &_MSCMGARCH_valid_asymm_bekk, 6},
    {"_MSCMGARCH_copula_cor", (DL_FUNC) &_MSCMGARCH_copula_cor, 2},
    {"_MSCMGARCH_cor_mat", (DL_FUNC) &_MSCMGARCH_cor_mat, 2},
    {"_MSCMGARCH_loglike_Normal_Copula_3", (DL_FUNC) &_MSCMGARCH_loglike_Normal_Copula_3, 4},
    {"_MSCMGARCH_loglike_Normal_Copula_3_asymm", (DL_FUNC) &_MSCMGARCH_loglike_Normal_Copula_3_asymm, 5},
    {"_MSCMGARCH_loglike_Normal_Copula_Copula_3", (DL_FUNC) &_MSCMGARCH_loglike_Normal_Copula_Copula_3, 4},
    {"_MSCMGARCH_loglike_Normal_Copula_Copula_3_asymm", (DL_FUNC) &_MSCMGARCH_loglike_Normal_Copula_Copula_3_asymm, 5},
    {"_MSCMGARCH_LL_loglike_Copula_3", (DL_FUNC) &_MSCMGARCH_LL_loglike_Copula_3, 3},
    {"_MSCMGARCH_LL_loglike_Copula_3_asymm", (DL_FUNC) &_MSCMGARCH_LL_loglike_Copula_3_asymm, 4},
    {"_MSCMGARCH_random_grid_search_normal_copula_3", (DL_FUNC) &_MSCMGARCH_random_grid_search_normal_copula_3, 5},
    {"_MSCMGARCH_random_grid_search_normal_copula_copula_3", (DL_FUNC) &_MSCMGARCH_random_grid_search_normal_copula_copula_3, 5},
    {"_MSCMGARCH_random_grid_search_normal_copula_3_asymm", (DL_FUNC) &_MSCMGARCH_random_grid_search_normal_copula_3_asymm, 6},
    {"_MSCMGARCH_random_grid_search_normal_copula_copula_3_asymm", (DL_FUNC) &_MSCMGARCH_random_grid_search_normal_copula_copula_3_asymm, 6},
    {"_MSCMGARCH_FilterProbs_Normal_Copula_3", (DL_FUNC) &_MSCMGARCH_FilterProbs_Normal_Copula_3, 4},
    {"_MSCMGARCH_FilterProbs_Normal_Copula_3_asymm", (DL_FUNC) &_MSCMGARCH_FilterProbs_Normal_Copula_3_asymm, 5},
    {"_MSCMGARCH_FilterProbs_Normal_Copula_Copula_3", (DL_FUNC) &_MSCMGARCH_FilterProbs_Normal_Copula_Copula_3, 4},
    {"_MSCMGARCH_FilterProbs_Normal_Copula_Copula_3_asymm", (DL_FUNC) &_MSCMGARCH_FilterProbs_Normal_Copula_Copula_3_asymm, 5},
    {"_MSCMGARCH_random_grid_search_LL_copula_3", (DL_FUNC) &_MSCMGARCH_random_grid_search_LL_copula_3, 4},
    {"_MSCMGARCH_random_grid_search_LL_copula_3_asymm", (DL_FUNC) &_MSCMGARCH_random_grid_search_LL_copula_3_asymm, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_MSCMGARCH(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
